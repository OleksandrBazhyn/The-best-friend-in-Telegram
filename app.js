require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { Configuration, OpenAIApi } = require('openai');
const schedule = require('node-schedule');
const { botHobbies } = require('./getBotHobbies')

// Telegram and OpenAI API tokens
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_API_TOKEN = process.env.OPENAI_API_TOKEN;

// OpenAI API initialization
const openai = new OpenAIApi(new Configuration({
    apiKey: OPENAI_API_TOKEN,
}));

// Telegram bot initialization
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// The bot's "life" memory
const botPersonality = {
    name: "–ì–ª—ñ–±",
    mood: "–≤–µ—Å–µ–ª–∏–π",
    hobbies: botHobbies,
    log: [] // memory of interactions with the user
};

// Start command
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤—ñ—Ç, —è ${botPersonality.name})))`);
});

// Text message processing
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    // Ignore user commands
    if (msg.text.startsWith('/')) return;

    // Response generation via OpenAI
    try {
        const response = await openai.createChatCompletion({
            model: "gpt-4o",
            messages: [
                {
                    role: "system",
                    content: `–¢–∏ ‚Äî ${botPersonality.name}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —ñ —Å—É—á–∞—Å–Ω–∏–π AI-–¥—Ä—É–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ —Ç–µ–±–µ —î —Å–≤–æ—î –∂–∏—Ç—Ç—è: —Ç–∏ –≤–µ—Å–µ–ª–∏–π, –ª—é–±–∏—à –º–µ–º–∏, –∂–∞—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞ –∑–∞–≤–∂–¥–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—à —Ö–æ—Ä–æ—à—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.`,
                },
                {
                    role: "user",
                    content: msg.text
                },
            ],
        });

        const botReply = response.data.choices[0].message.content;

        // We keep the "memory" of the interaction
        botPersonality.log.push(
            {
                user: msg.text,
                bot: botReply,
            },
        );

        // Send response
        bot.sendMessage(chatId, botReply);
    } catch (error) {
        console.error("Response error: ", error);
        bot.sendMessage(chatId, "–ú–±–¥–∞..");
    }
});

// Planner for "messages from life"
schedule.scheduleJob('0 9 * * *', () => { // Message at 9:00
    bot.sendMessage("bestfriend_openAI_Bot", "–î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫, —Ç–∏ —è–∫?")
});

schedule.scheduleJob('0 21 * * *', async () => { // Message at 21:00
    try {
        const response = await openai.createChatCompletion({
            model: "gpt-4o",
            messages: [
                {
                    role: "system",
                    content: "–¢–∏ —Å—É—á–∞—Å–Ω–∏–π —ñ –≤–µ—Å–µ–ª–∏–π AI-–¥—Ä—É–≥. –ó–≥–µ–Ω–µ—Ä—É–π —Ü—ñ–∫–∞–≤—É –¥—É–º–∫—É, –º–µ–º —á–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
                },
            ],
        });

        const dynamicThought = response.data.choices[0].message.content;
        bot.sendMessage("bestfriend_openAI_Bot", dynamicThought);
    } catch (error) {
        console.error("Random evening message text generation error: ", error);
        bot.sendMessage("bestfriend_openAI_Bot", "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∞–ª–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –≤—Å–µ –±—É–¥–µ üòä");
    }
});

schedule.scheduleJob('*/15 * * * *', async () => {
    const randomMessages = await openai.createChatCompletion({
        model: "gpt-4o",
        messages: [
            {
                role: "system",
                content: "–ü–æ—á–Ω–∏ —Ä–æ–∑–º–æ–≤—É –∑ —Ü—ñ–∫–∞–≤–æ—ó —Ç–µ–º–∏. –¢–∏ –¥–æ–±—Ä–∏–π —Ç–∞ —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π –¥—Ä—É–≥."
            },
        ],
    });
    
    const message = randomMessages[Math.floor(Math.random() * randomMessages.length)];
    
    bot.sendMessage("bestfriend_openAI_Bot", message);
    
    const nextInterval = Math.random() * (120 - 90) + 90;
    setTimeout(sendRandomMessage, nextInterval * 60 * 1000);
    
    bot.sendMessage("bestfriend_openAI_Bot", randomActions[Math.floor(Math.random() * randomActions.length)]);
});

console.log(`${botPersonality.name} is ready!`);
